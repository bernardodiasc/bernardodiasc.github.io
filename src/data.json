{"articles":{"about-me":{"index.md":{"file":"/articles/about-me/index.md","dir":"/articles/about-me","name":"index","base":"index.md","ext":".md","attr":{"title":"About me","excerpt":"Information about the author and developer of this site."},"body":"\n# About Bernardo Dias da Cruz\n\n<figure>\n  <img alt=\"Bernardo Dias da Cruz\" src=\"/content/articles/about-me/me.jpg\" />\n</figure>\n\nI'm the author and developer of this site. Here I share my random thoughts about web development and everything else that I consider meaningful on a professional scope.\n\nInformation technology can be an art and manage all this abstract material have a quite wide range of ways. I'm specialized on user experience, on the client-side of web development. Have been doing code for browsers since 2005 and my expertise is based on over a hundred projects made.\n\nTo outline a few of my experiences:\n\n- Training in entrepreneurship, owner attitude\n- Marketing research and brainstorming of ideas\n- Bootstrapping projects and front-end architecture for scale\n- Planning and coordinating development\n- Leading development teams, supporting teammates\n- Analysis of problems and solution research\n- User experience and bulletproofing user interface\n\n## Contact\n\nDrop me an email at `bernardodiasdacruz@gmail.com`.\n\nCall me on `germchaos.skype` or by the phone `+55 0 12 99123-5196`.\n\nFollow me on [github.com/bernardodiasc](https://github.com/bernardodiasc) and [twitter.com/bernardodiasc](https://twitter.com/bernardodiasc).\n\n\n"}}},"categories":{"frontend":{"index.md":{"file":"/categories/frontend/index.md","dir":"/categories/frontend","name":"index","base":"index.md","ext":".md","attr":{"title":"Frontend architecture","icon":"business"},"body":""}},"integrations":{"index.md":{"file":"/categories/integrations/index.md","dir":"/categories/integrations","name":"index","base":"index.md","ext":".md","attr":{"title":"Third-party integrations","icon":"extension"},"body":"\nThe posts in this category are about integrations with third-party platforms and libraries.\n"}},"strategy":{"index.md":{"file":"/categories/strategy/index.md","dir":"/categories/strategy","name":"index","base":"index.md","ext":".md","attr":{"title":"Strategy & Entrepreneurship","icon":"binoculars"},"body":"\nThe posts in this category are about strategic thinking and entrepreneurship attitude.\n"}},"this-blog":{"index.md":{"file":"/categories/this-blog/index.md","dir":"/categories/this-blog","name":"index","base":"index.md","ext":".md","attr":{"title":"This blog development process","icon":"developer-board"},"body":"\nThe posts in this category are about this blog development process.\n"}}},"posts":{"2018-03-16-component-styles-isolation-dealing-with-css-inheritance":{"index.md":{"file":"/posts/2018-03-16-component-styles-isolation-dealing-with-css-inheritance/index.md","dir":"/posts/2018-03-16-component-styles-isolation-dealing-with-css-inheritance","name":"index","base":"index.md","ext":".md","attr":{"title":"Component styles isolation, dealing with CSS inheritance","date":"2018-03-16T00:00:00.000Z","category":"frontend","tags":["architecture","css","isolation","inheritance","postcss","composes","react","css-modules"],"excerpt":"How to ensure visual consistency with UI components usages."},"body":"\nHello there! This is the first post of the new category [Frontend architecture](/category/frontend), where I plan to describe many cool methodologies and techniques for large scale frontend apps. Let's get started!\n\nIn this post I'll tell you how to deal with unexpected styles that happens in large scale modular projects by make then expected taking advance of native mechanisms of CSS!\n\n## A little bit of introduction on modularization\n\nIn the modern age of frontend development, all attention turns into components, why is that? To put simple, one important rule of scaling projects, mostly when talking about CSS, is the ability to remove code. Scaling frontend apps is not just about getting bigger, but it's a lot about get rid off deprecated code. And to deal with that, developers started to focus on development of components, instead for instance, pages.\n\nA component is a piece of code that has it's code isolated from the rest of the app. The component can have pieces of HTML, CSS and JS. But historicaly these languages had a lot limitation to accomplish this approach, the good thing is that an age has passed and things evolved quite a lot. What we needed all this time is to make the code modular, basically splitting the code in many parts that can then be assembled together on demand, and in a way that doesn't harm performance or doesn't cost our sanity at all.\n\nFor the HTML, we had templating approach already available in XSLT since 2001. Not to mention server-side languages that allowed us to assemble the markup the way we wanted. Many developers then noticed the chaos that mixing data management with templating could become. At that point many MVC frameworks came to offer good separation of concerns and template engines popped up in batches for the view part, the developer could pick what works better for the server-side rendered project. I promise to go further on that in another post ;)\n\nBefore going to CSS, that is the point of this post, let me briefly comment about the client-side modules JS (also something that deserves it's own post). On this subject I would recommend this reading https://addyosmani.com/writing-modular-js/, it's quite great explanation of modular JavaScript. TL;DR: browsers, at the time of this post, still don't widely support dynamic imports, then many methods and toolings was created to provide ways to do that, so we could have our JS pieces separated from each other and at the same time working well when put to run together.\n\nFor the CSS, we had `@import` rule since CSS Level 1, in other words, since the beginning of the language. We could also include many `<link>` tags in our HTML and load individually each CSS piece. But both approachs have some big concerns regarding page loading. I'm not going into details of this so I can get back to the topic quickly, but things evolved and will be changing soon with HTTP/2 already knowking in the door. If you want to know more about this I recommend reading this 2009 post http://www.stevesouders.com/blog/2009/04/09/dont-use-import/ and also this 2016 post https://jakearchibald.com/2016/link-in-body/.\n\nThe point is, components are separated pieces of code, that can be written in a variety of languages and ways, but at the end they will return into HTML, CSS and JS.\n\n## CSS Cascading and Inheritance\n\nAlright, now that we covered the concept of modularization in frontend code, let's get into some mechanisms of the CSS language: cascading and inheritance.\n\nCascading is an important aspect of CSS (yeah, CSS is an acronym for _Cascading Style Sheets_). This is basically indicated the order that styles are applied. It will be affected by:\n\n1. Importance\n2. Specificity\n3. Source order\n\nHaving the cascading in mind and knowing that some styles can override others based on cascading, the other mechanism that relates to this is the inheritance. Inheritance means that some elements can inherit styles from parents even without explicit declaration. But inheritance effect does not apply to all CSS properties.\n\nAs an example, `font-family` and `color` are automatically inherited, this makes styling easier since it can define the base values for these properties in the `<html>` and all children elements will get same styles applied by default. The cascading mechanism will allow overriding specific elements (and it's childrens) when needed.\n\nOn other hand, `margin`, `padding`, `border` and `background` are not inherited by default. Imagine the trouble to create styles if that properties get inherited by all it's children elements... In any case, if needing to apply inheritance for a specific property in an element, there is the CSS keyword `inherit`.\n\nMany further details about all of that can be read here:\n\n- [About Cascade and inheritance](https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Cascade_and_inheritance)\n- [Introducing the CSS Cascade](https://developer.mozilla.org/en-US/docs/Web/CSS/Cascade)\n- [Inheritance mechanism](https://developer.mozilla.org/en-US/docs/Web/CSS/inheritance)\n- [inherit keyword](https://developer.mozilla.org/en-US/docs/Web/CSS/inherit)\n\n## Component styles isolation\n\nNow that we've advanced on our comprehension of components, modularization, CSS cascading and inheritance, let's see how to deal with CSS on modern frontend development. I'm not going to propose the ultimate way to do your code, but rather an overall understanding of the problem that we need to deal on large scale modular projects and, of course, some different approaches that helps dealing with that.\n\n### The problem\n\nWe are talking about modular code and talking about UI components. One can develop an app without caring on isolation, but that's not going to help taking advance of modern methodologies. To take the best of it, UI components need to be developed in isolation! That means developing the parts outside the app, and later jump on integration of the parts.\n\nThe main problem in this approach is that sometimes, during the app implementation, when applying UI components in different parts of the app, or maybe in different apps, the visual return something different than expected, different from what looked like in the isolated platform. This is not uncomon on big projects, specially when UI components are used across many different apps, if the inheritable properties are forgoten, unexpected things can happen.\n\n### The solution\n\nThere are many approaches to solve this problem and it will vary depending on your technology stack.\n\nOn a big project I helped developing, we used PostCSS with CSS-Modules in a React code base, that allowed us to create a CSS object called `component`, in this object we set some styling reset properties, as `font-family`, `font-size`, `color`, and others that does inheritance by default. These reset values was based on CSS Variables, and although that CSS Variables had default generic values to fallback, they could differ from app to app.\n\nThis is how we used:\n\n```\n/**\n *\n * Component isolation\n *\n * Usage:\n *\n * @value component from theme('objects.isolation.css');\n *\n * .componentname {\n *   composes: component;\n * }\n *\n */\n\n.component {\n  display: block;\n  box-sizing: border-box;\n  font-family: var(--typographyFamilySansserif);\n  font-size: var(--typographySizeNormal);\n  font-weight: var(--typographyWeightNormal);\n}\n```\n\nOne important aspect of that approach was in the CSS output. By choosing CSS-Modules `composes` we had a single class declaration in the CSS output, meant that increasing the amount of isolated components would not result in increasing size of the CSS in the matter of the isolation styles. Also, we choose ITCSS approach to for the source order, this means the `objects.isolation.css` classes was before all the component classes in the source orders, so overides worked flawlessly.\n\nI mentioned that wasn't going to tell you the ultimate way to deal with styles isolation because, as you may noticed on my approach, we choose to reset only the component wrapper and not all it's children elements. That would be perfectly possible with the same technique, we simply decided to keep it simple and take advance of inheritance inside components and reseting just in the component level.\n\nOne other technique I've read recently that I really enjoy can be read in this Yel post [CSS in the Age of React: How We Traded the Cascade for Consistency](https://engineeringblog.yelp.com/2018/03/css-in-the-age-of-react.html), I'd recommend you to take a look at their [Lemon Reset](https://github.com/Yelp/lemon-reset) set of React components too.\n\n## Conclusion\n\nThat's pretty cool, right? One big problem of large CSS code bases is the unpredictability. Believe me, this problem can result in a ton of wasted money because can make developers waste too many hours searching for bugs, bugs that might not even happen at first.\n\nGoing for a consistent approach in the frontend architecture allows the project to resiliently scale, each new component included will be surely isolated and these wicked CSS bugs will be avoided for good.\n\nI hope you have enjoyed this post, and if you have different ideas to deal with styles isolation or anything else to say, please comment bellow! :)\n"}},"2018-03-13-categories-and-typography":{"current-article.png":{"file":"/posts/2018-03-13-categories-and-typography/current-article.png","dir":"/posts/2018-03-13-categories-and-typography","name":"current-article","base":"current-article.png","ext":".png","width":1197,"height":1036},"current-category.png":{"file":"/posts/2018-03-13-categories-and-typography/current-category.png","dir":"/posts/2018-03-13-categories-and-typography","name":"current-category","base":"current-category.png","ext":".png","width":1199,"height":795},"current-home.png":{"file":"/posts/2018-03-13-categories-and-typography/current-home.png","dir":"/posts/2018-03-13-categories-and-typography","name":"current-home","base":"current-home.png","ext":".png","width":1196,"height":584},"current-post.png":{"file":"/posts/2018-03-13-categories-and-typography/current-post.png","dir":"/posts/2018-03-13-categories-and-typography","name":"current-post","base":"current-post.png","ext":".png","width":1199,"height":801},"index.md":{"file":"/posts/2018-03-13-categories-and-typography/index.md","dir":"/posts/2018-03-13-categories-and-typography","name":"index","base":"index.md","ext":".md","attr":{"title":"Categories and better typography","date":"2018-03-13T00:00:00.000Z","category":"this-blog","tags":["typography","content"],"excerpt":"Content can now be fetched by category and the visual got some polishing for better readability."},"body":"\nOne more day of development on this site, some more updates available. It's nice to see the thing evolving!\n\nToday I could improve considerably the typography, again... Yeah, because wasn't good enough on previous version. Although I still think it always have room for more improvement, but need to focus on the schedule and deliver small changes at a time.\n\nCheckout the list of updates:\n\n- Got rid of that sidebar in favor of the tabs navigation in the header;\n- The page have more space for text and have white background;\n- New font families for headings and text;\n- The post listing have icons for the categories;\n- The category page was assembled to list that category's posts;\n- Categories is now a content type, maybe will have a poster image in the future;\n- Looks a bit better on mobile, although more work is still required to be fully mobile-friendly;\n\n## Categories\n\nThe idea of categories is to provide a way to have a collection of posts. A category is not exactly the same of a tag by some reasons:\n\n- Categories are unique per posts and a post can have many tags;\n- Categories have own pages while tags will only have a dynamic filter on [search page](http://bernardodiasdacruz.com/search/);\n\nAt the time of this post, the content are available into 3 categories:\n\n- [Third-party integrations](http://bernardodiasdacruz.com/category/integrations/)\n- [This blog development process](http://bernardodiasdacruz.com/category/this-blog/)\n- [Strategy & Entrepreneurship](http://bernardodiasdacruz.com/category/strategy/)\n\n## Typography\n\nWell, the previous choices for typography wasn't good, so I'm testing a new combination :)\n\n- **Permanent Marker** for the site title\n- **Cairo** for the headings\n- **Karma** for the text\n\n## Screenshots\n\nSome screenshots to keep a history of the changes.\n\n### Previous version\n\n<figure>\n  <img alt=\"Homepage of this blog's previous version\" src=\"/content/posts/2018-03-13-categories-and-typography/previous.png\" />\n  <figcaption>Home page</figcaption>\n</figure>\n\n### The current version\n\n<figure>\n  <img alt=\"Homepage of this blog's current version\" src=\"/content/posts/2018-03-13-categories-and-typography/current-home.png\" />\n  <figcaption>Home page</figcaption>\n</figure>\n<figure>\n  <img alt=\"Post page of this blog's current version\" src=\"/content/posts/2018-03-13-categories-and-typography/current-post.png\" />\n  <figcaption>Post page</figcaption>\n</figure>\n<figure>\n  <img alt=\"Category page of this blog's current version\" src=\"/content/posts/2018-03-13-categories-and-typography/current-category.png\" />\n  <figcaption>Category page</figcaption>\n</figure>\n<figure>\n  <img alt=\"Article page of this blog's current version\" src=\"/content/posts/2018-03-13-categories-and-typography/current-article.png\" />\n  <figcaption>Article page</figcaption>\n</figure>\n"},"previous.png":{"file":"/posts/2018-03-13-categories-and-typography/previous.png","dir":"/posts/2018-03-13-categories-and-typography","name":"previous","base":"previous.png","ext":".png","width":1200,"height":1041}},"2018-03-06-inject-google-analytics-tag-manager-in-a-meteor-app":{"index.md":{"file":"/posts/2018-03-06-inject-google-analytics-tag-manager-in-a-meteor-app/index.md","dir":"/posts/2018-03-06-inject-google-analytics-tag-manager-in-a-meteor-app","name":"index","base":"index.md","ext":".md","attr":{"title":"Inject Google Analytics tag manager in a Meteor app","date":"2018-03-06T00:00:00.000Z","category":"integrations","tags":["meteor","google analytics","seo"],"excerpt":"Instructions about how to easily inject GA tag manager in a Meteor app."},"body":"\nSometimes we want to inject data with the original HTML request to make it available sooner, in cases like Google Analytics tag manager it needs to be inserted two tags, one right after `<head>` opening and other right after `<body>` opening.\n\nThere's a Meteor package that makes this task easy: https://github.com/meteorhacks/meteor-inject-initial/\n\nTo use you need to first install it in your app:\n\n```\nmeteor add meteorhacks:inject-initial\n```\n\nAfter installed, include in your app's `package.json`:\n\n```\napi.use('meteorhacks:inject-initial', ['client', 'server']);\n```\n\nOn the `server.js` file use methods `Inject.rawHead` and `Inject.rawBody`:\n\n```\nInject.rawHead('headGA', `\n<!-- Google Tag Manager -->\n<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\nnew Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\nj=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n})(window,document,'script','dataLayer','YOUR_TAG_ID');</script>\n<!-- End Google Tag Manager -->\n`);\n```\n\n```\nInject.rawBody('bodyGA', `\n<!-- Google Tag Manager (noscript) -->\n<noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=YOUR_TAG_ID\"\nheight=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n<!-- End Google Tag Manager (noscript) -->\n`);\n```\n\nThat's it, it's done!\n\n<figure>\n  <img alt=\"Example of a Meteor app source code with GA tag manager injected\" src=\"/content/posts/2018-03-06-inject-google-analytics-tag-manager-in-a-meteor-app/source-code.png\" />\n  <figcaption>Example of a Meteor app source code with GA tag manager injected</figcaption>\n</figure>\n"},"source-code.png":{"file":"/posts/2018-03-06-inject-google-analytics-tag-manager-in-a-meteor-app/source-code.png","dir":"/posts/2018-03-06-inject-google-analytics-tag-manager-in-a-meteor-app","name":"source-code","base":"source-code.png","ext":".png","width":704,"height":774}},"2018-03-05-fetching-from-instagram-using-facebook-graph-api":{"index.md":{"file":"/posts/2018-03-05-fetching-from-instagram-using-facebook-graph-api/index.md","dir":"/posts/2018-03-05-fetching-from-instagram-using-facebook-graph-api","name":"index","base":"index.md","ext":".md","attr":{"title":"Fetching from Instagram using Facebook Graph API","date":"2018-03-05T00:00:00.000Z","category":"integrations","tags":["instagram","facebook","graph api","fetch","css grid","responsiveness"],"excerpt":"Instagram API is being deprecated and from now will be using Facebook Graph API."},"body":"\nPast week I had a task to fetch media from Instagram and build a mosaic wall with it.\n\n<figure>\n  <img alt=\"Instagram media mosaic at https://x-team.com/join/\" src=\"/content/posts/2018-03-05-fetching-from-instagram-using-facebook-graph-api/instagram-media-mosaic.png\" />\n  <figcaption>This module was included at https://x-team.com/join/</figcaption>\n</figure>\n\nI thought it was going to be trivial, Instagram API v1 is really simple. All we have to do is to create a Client ID and get an Access Token, then fetch a JSONP from the API Url `https://api.instagram.com/v1/`, boom, done!\n\nOr even simpler, use some library like http://instafeedjs.com/... Take a look at this demo on CodePen https://codepen.io/gabriellewee/pen/qxprPw, how simple it is! Client-side fetching without any trouble.\n\nWell, the winds changed direction, Instagram now uses Facebook Graph API, which is quite powerful, but it's usage have many differences. Check out the news at Facebook Developer's blog: [Instagram Graph API Launches and Instagram API Platform Deprecation](https://developers.facebook.com/blog/post/2018/01/30/instagram-graph-api-updates/).\n\nSo, this is how to get started on this new Instagram API: https://developers.facebook.com/docs/instagram-api/getting-started/. Not much difficult if you follow all the steps. At the end you'll have a Facebook user access token with grants to fetch Instagram media. Cool, right? Well, some pitfalls found in the way, let me tell you.\n\nTo put simple, the Instagram API works this way:\n\n1. You need to have a **Facebook Page** and connect that page to the **Instagram Business Account**;\n2. Then you need to register a new **Facebook App** with a developer account (see https://developers.facebook.com/docs/apps/register);\n3. Then you need get an access token for your user and figure out your new **App ID** using their tool https://developers.facebook.com/tools/explorer/;\n\nNow, the pitfalls:\n\n- If you plan to make a feching script on client-side, forget about it, because you'll expose you access token, and that's not good idea, you might better to have a backend to fetch the API and safe ways to store your access token;\n- If you have an user accound that manages many pages, it's better to not use that too, because the access token generated gives grant to all your managed pages;\n- If you are not building a real app, and simply wanting to display a mosaic wall with Instagram media in your site, your user's access token might not work well because it expires really fast;\n\nInstead explain step-by-step, let me share a really useful answer on StackOverflow that solved all my problems: [facebook: permanent Page Access Token?](https://stackoverflow.com/questions/17197970/facebook-permanent-page-access-token/28418469#28418469). With that I could generate a long-lived (never expiring) access token for a **Facebook Page**!\n\nThe docs for a Node.js usage are quite good: https://developers.facebook.com/docs/javascript\n\nYou will basically need to firstly fetch:\n\n```\nhttps://graph.facebook.com/v2.12/[PAGE_ID]/media?access_token=[PAGE_ACCESS_TOKEN]\n```\n\nThis will return a paginated list with media's IDs. Then you need to loop that list and for each item fetching:\n\n```\nhttps://graph.facebook.com/v2.12/[MEDIA_ID]?access_token=[PAGE_ACCESS_TOKEN]&fields=media_type,media_url,thumbnail_url,permalink,caption\n```\n\nThe reference for Instagram media fields available can be found at https://developers.facebook.com/docs/instagram-api/reference/media\n"},"instagram-media-mosaic.png":{"file":"/posts/2018-03-05-fetching-from-instagram-using-facebook-graph-api/instagram-media-mosaic.png","dir":"/posts/2018-03-05-fetching-from-instagram-using-facebook-graph-api","name":"instagram-media-mosaic","base":"instagram-media-mosaic.png","ext":".png","width":1146,"height":692}},"2018-03-05-redesign-and-better-typography":{"design-round1-home.png":{"file":"/posts/2018-03-05-redesign-and-better-typography/design-round1-home.png","dir":"/posts/2018-03-05-redesign-and-better-typography","name":"design-round1-home","base":"design-round1-home.png","ext":".png","width":1200,"height":374},"design-round1-post.png":{"file":"/posts/2018-03-05-redesign-and-better-typography/design-round1-post.png","dir":"/posts/2018-03-05-redesign-and-better-typography","name":"design-round1-post","base":"design-round1-post.png","ext":".png","width":1200,"height":719},"design-round2-home.png":{"file":"/posts/2018-03-05-redesign-and-better-typography/design-round2-home.png","dir":"/posts/2018-03-05-redesign-and-better-typography","name":"design-round2-home","base":"design-round2-home.png","ext":".png","width":1200,"height":718},"design-round2-post.png":{"file":"/posts/2018-03-05-redesign-and-better-typography/design-round2-post.png","dir":"/posts/2018-03-05-redesign-and-better-typography","name":"design-round2-post","base":"design-round2-post.png","ext":".png","width":1200,"height":721},"design-round3-home.png":{"file":"/posts/2018-03-05-redesign-and-better-typography/design-round3-home.png","dir":"/posts/2018-03-05-redesign-and-better-typography","name":"design-round3-home","base":"design-round3-home.png","ext":".png","width":1200,"height":971},"design-round3-post.png":{"file":"/posts/2018-03-05-redesign-and-better-typography/design-round3-post.png","dir":"/posts/2018-03-05-redesign-and-better-typography","name":"design-round3-post","base":"design-round3-post.png","ext":".png","width":1200,"height":974},"index.md":{"file":"/posts/2018-03-05-redesign-and-better-typography/index.md","dir":"/posts/2018-03-05-redesign-and-better-typography","name":"index","base":"index.md","ext":".md","attr":{"title":"Redesign and better typography","date":"2018-03-05T00:00:00.000Z","category":"this-blog","tags":["design","typography","CSS"],"excerpt":"Fourth day on this site's development, a blog for reading must be nice to read."},"body":"\nCreating new post:\n\n```\n$ yarn new:content\n? What type of content would you like to generate? posts\n? Content name: 2018-03-05-redesign-and-better-typography\n```\n\nYeah, that's how it looks my content generator. After that a Markdown file created with basic YML variables being used on posts.\n\nHeading to the what this post is all about:\n\n## Design and typography progress\n\nDisclaimer: I'm not a designer, what I do good is to make code out of graphic designs. Art direction is a whole different skill that requires huge experience and dedication. But step by step this project will look prettier, let's see what we've got so far.\n\n### First round\n\nThis version was most minimalistic as possible. I haven't planned any design for this site so was more a matter to display content black&white that doesn't looked like browser defaults and some minimal structure for layout the content and navigation.\n\n#### Home page\n\n<a href=\"/content/posts/2018-03-05-redesign-and-better-typography/design-round1-home.png\" target=\"_blank\" rel=\"noopener noreferrer\">\n  <img alt=\"\" src=\"/content/posts/2018-03-05-redesign-and-better-typography/design-round1-home.png\" />\n</a>\n\n#### Post page\n\n<a href=\"/content/posts/2018-03-05-redesign-and-better-typography/design-round1-post.png\" target=\"_blank\" rel=\"noopener noreferrer\">\n  <img alt=\"\" src=\"/content/posts/2018-03-05-redesign-and-better-typography/design-round1-post.png\" />\n</a>\n\n### Second round\n\nFew hours more, many CSS lines more. On this stage I've focused on creating some more CSS structures, more colours and an attempt of a design theme. The typography here still looks awful 😅\n\n#### Home page\n\n<a href=\"/content/posts/2018-03-05-redesign-and-better-typography/design-round2-home.png\" target=\"_blank\" rel=\"noopener noreferrer\">\n  <img alt=\"\" src=\"/content/posts/2018-03-05-redesign-and-better-typography/design-round2-home.png\" />\n</a>\n\n#### Post page\n\n<a href=\"/content/posts/2018-03-05-redesign-and-better-typography/design-round2-post.png\" target=\"_blank\" rel=\"noopener noreferrer\">\n  <img alt=\"\" src=\"/content/posts/2018-03-05-redesign-and-better-typography/design-round2-post.png\" />\n</a>\n\n### Third round\n\nFor the third round was very important to make the typography better. I started sharing my blog already and not everyone gets the fact that state of art takes a lot time, the time I haven't yet spent on this project. But being a text content site by essence, make the reading experience good is crucial.\n\nI choose 2 font families to work with, both provided by [Google Fonts](https://fonts.google.com/):\n\n- **Lato** for common texts\n- **Playfair Display** for headings\n\nThe blueprint theme relates to things I love to do, as in sketching UI, wireframing layout and information and front end architecture. Bootstraping projects is really fun for me. So I'm intended to explore a lot these subjects here in this blog, this theme kinda of made sense to me and I hope it sticks. 😄\n\nOn more technical details, I've created a lot CSS Variables to store constant values for typography, as colours and font-faces. During design updates I did a lot tries and updating directly on CSS variables, and that made this process much easier.\n\nI also created the `<TextBlock />` component [(see example on docs)](http://bernardodiasdacruz.com/docs/?selectedKind=Displays%2FTextBlock&selectedStory=Example) to hold all the typography styles within. I'll dedicate one post just to explain why I isolate typography styles from global CSS scope, for now only a very basic typography styles are set on `body` and `h1-6`, and global resets on HTMl elements that are mostly set to inherit from parents.\n\n#### Home page\n\n<a href=\"/content/posts/2018-03-05-redesign-and-better-typography/design-round3-home.png\" target=\"_blank\" rel=\"noopener noreferrer\">\n  <img alt=\"\" src=\"/content/posts/2018-03-05-redesign-and-better-typography/design-round3-home.png\" />\n</a>\n\n#### Post page\n\n<a href=\"/content/posts/2018-03-05-redesign-and-better-typography/design-round3-post.png\" target=\"_blank\" rel=\"noopener noreferrer\">\n  <img alt=\"\" src=\"/content/posts/2018-03-05-redesign-and-better-typography/design-round3-post.png\" />\n</a>\n\n---\n\nI hope you like the progress so far, more visual upgrades will come soon. If you have suggestions, please let me know in the comments below!\n"}},"2018-02-27-opportunity-cost":{"index.md":{"file":"/posts/2018-02-27-opportunity-cost/index.md","dir":"/posts/2018-02-27-opportunity-cost","name":"index","base":"index.md","ext":".md","attr":{"title":"Opportunity cost","date":"2018-02-27T00:00:00.000Z","category":"strategy","tags":["life","business","development"],"excerpt":"For each opportunity we take, there are a ton of others we let pass."},"body":"\nOne bright day you go to the market, you have a bunch of money in your pocket and want to get a dessert. You just ignore the things you don't like and there are still many options available, very good ones. Damn, you do like some sweet taste and you can't have them all.\n\nFacing the loss of potential sampling from other alternatives, the choice becomes harder. You need to pick one, and that means not picking all the others.\n\nOn life, business or development, it's all the same. This is called \"opportunity cost\" and represents the amount of gain you are not getting from the opportunity you have chosen. Think about, if you looking for a date, or searching for a job, or choosing a technology to build your project... All decisions we make, and the ones that are made for us, this cost applies.\n\n## The time factor\n\nIt's a fact that everyone have a limited amount of time, as in 24h/day, as in 1 lifetime. There are too many variables to measure opportunity costs of the decisions, and these variables varies a lot from different kinds of opportunities. So let's take the time as a universal measure and allow me to elaborate how this can help.\n\n## Deciding, no matter what, but when\n\nThe time factor can't help much on deciding the dessert, I guess, but it does help to take into account that a decision need to be made at some moment. The time is passing around you and you are still looking at all the options. It will matter if you get the strawberry or lemon flavours? Well, at surface it will not. Decide and pick one.\n\nThe most successful business keep the importante on the momentum. They are commited with the timing. Make thing happen before the opportunity goes away. Rushing or delaying the decisions can cause a lot of trouble and can result in failure. On other hand taking decisions in the right timing can be the crux of success.\n\n## Planning for the future\n\nWe are often afraid of make bad decisions. Too early or too late. Or simply too wrong. That's what happens when someone is inexperienced and don't have enough resources to take decisions. The resources I'm referring here are the material and previous knowledges weighing in decisions.\n\nFuture is a abstract time, a time that doesn't really exist. What exist is the present. And on each individual mind, there are memories of the past. A planner mind can take advance from previous experiences and be prepared for the future, when that future becomes present, the mind is ready to take action.\n\n## Looking back\n\nGreat strategists and decision makers are always looking back. They accumulate a huge amount of experience from it's actions and all that experience are resources to make batter on next opportunities. Great teams usually make restrospective calls and review everything that happened during a certain period. They evaluate how the plans went, how their decisions returned and how they could do better.\n\n## Avoid the void\n\nLooking back is great, but one shouldn't stay there. Avoid losing the mind thinking how things could be better if other decisions would be taken. That can cause huge depression and a pessimistic feeling. The past experiences help us to overcome the future experiences, evaluate the successes and mistakes, learn with both and remember, the time doesn't wait, so get back to the present and focus on next challenges.\n\n---\n\nI have the feeling that everything I wrote above is hight theoretical and my sense of opportunity cost tells me that if I want to make this post better, and make it worth the time invested, both for me as for you, then I should say something that one can really use on practice.\n\nLet me brief for you:\n\n- Take some time, but not much, to consider the future:\n  - Think about your next tasks for the day. A day is a period that you have hight chances of plan well and accomplish result;\n  - Think about tomorrow, but tomorrow may depend on today, so be flexible and when tomorrow comes, this will help with your tomorrow's today planning;\n  - Think about your week, your fortnight, your month, quarter, semester, year, 2 years, 5 years, 10 years, 20 years, 50 years... Yeah, think about, take some very quiet moment to just imagine how things will be in your life in the future. This is not planning, but somehow gives you some perspective of how to approach the desicions of today because it gives you some general direction for your life;\n- Learn with the past:\n  - The past comes fast, all the time you have more past memories accumulating. When you make a decision, try to see the result in a short time, evaluate and try to learn something;\n  - Don't regret your decisions, but if regreting something, do it for missing the decision momentuns, learn with that and make better next time;\n  - The past teach us both on good and bad experiences, something we forgot to learn the god experiences because we are cheering at it, the same happens when we are regretting for the bad experiences, don't do that, the time comes inexorably;\n- Take notes, be scientific. I know you have great mind, but taking notes have a special effect, something that I would enjoy to write about in another post;\n- Learn to say \"no\". This is life changer, because learning to say \"no\" also means that you learn to say \"yes\". You'll be consciously deciding what's best for you and will avoid a lot of wasted time;\n- The most impostant advice, learn about yourself. You have one life, don't waste it doing stuff that's nonsense for you, the opportunity cost is huge if you make decisions to please others;\n\nThat's all for now. I could use my time doing a lot of things, but I decided to write this post because it have a interesting opportunity cost for me, I hope that your reading also worth the time. Please tell me what you think in the comments, of course, if you feel that worth your time and effort. Thanks! :D\n"}},"2018-02-27-comments-section":{"index.md":{"file":"/posts/2018-02-27-comments-section/index.md","dir":"/posts/2018-02-27-comments-section","name":"index","base":"index.md","ext":".md","attr":{"title":"Comments section","date":"2018-02-27T00:00:00.000Z","category":"this-blog","tags":["disqus","react"],"excerpt":"New feature included, opening channel for feedbacks!"},"body":"\nComment section is a cool feature to have. Now you can express yourself and talk to me!\n\nThis is a static file site, so don't have a server running on background to store and controll the data. Instead spend a lot time designing and building my solution for this need, I choose to use [Disqus](http://disqus.com), that I have previous experience using it and it's great.\n\nFor the implementation I decided to use https://github.com/ryanvalentin/disqus-react. The Disqus implementation is quite straight forward, but doing it on React would have some considerations to take care of and I just wanted to skip and rely on something already battle tested.\n\nTaking advance on this post, have you noticed the new styles? Well, I admit that art direction is not my strenght, and so far I didn't invested too many time working to make it pretty. Will continue touching styles to make better. Tell me what you think about the visual, bring it on! What, if something, did you liked? How could be better? :D\n"}},"2018-02-26-boilerplate-generators":{"index.md":{"file":"/posts/2018-02-26-boilerplate-generators/index.md","dir":"/posts/2018-02-26-boilerplate-generators","name":"index","base":"index.md","ext":".md","attr":{"title":"Boilerplate generators","date":"2018-02-26T00:00:00.000Z","category":"this-blog","tags":["node.js","yarn","boilerplate","generators"],"excerpt":"This site have some custom made boilerplate generators that makes life easier."},"body":"\nThere are some repetitive tasks that can cause some laziness to advance fast in the project. Boilerplate generators are something very cool that it's has been around for a while. Many of us already used [Yeoman](http://yeoman.io/) for the scaffolding task. There are also many React boilerplate generators on NPM that works quite well for many purposes.\n\nFor this project I wrote my own script to generate files. Not intended to be a competitor of other options, this was for fun, for exercising Node.js skills.\n\nLet's see what we have already:\n\n- `yarn new:component`\n  - This will prompt the user to pick one of the types: `displays` or `screens`, ask for a name and if it should be nested in some other component of same type. This setup uses the \"display&container\" pattern for React components, I think this is amazing way to develop frontend and will dedicate an entire post explaining that.\n- `yarn new:content`\n  - So far this site only have `posts` content type, and so far it's just a simple markdown (frontmatter) file with some defaul variables.\n\n## About the progress\n\nI'll repeat this a little often, this project is in progress, this is second day I'm working on it and I'll explain what I'm doing on the posts. I hope you enjoy and find it useful... And I hope you give suggestions and feedback as soon as I integrate a comment section 😂 - [GH Issues](https://github.com/bernardodiasc/bernardodiasc.github.io/issues) is already there if you want to say something now.\n\nAlright, my generator scripts are not optimized, there are a lot redundant code and things that is far from perfect. But hey, it works. That's not ideal I know but I'm already using it for myself and as much as my available time allows me, I'll make it better.\n\nHere, my goal for a near future is to abstract away the generator script into a NPM package [github.com/bernardodiasc/generator](https://github.com/bernardodiasc/generator) (pleae note that this package is still not ready at the time I write this post), I'll even include a boilerplate of this entire framework and more advanced CLI.\n\nIf you want to take a look at the source code of the existing generators, here it goes:\n\n- [src/config/componentGenerator.js](https://github.com/bernardodiasc/bernardodiasc.github.io/blob/develop/src/config/componentGenerator.js)\n- [src/config/contentGenerator.js](https://github.com/bernardodiasc/bernardodiasc.github.io/blob/develop/src/config/contentGenerator.js)\n\nPull requests are welcomed! Cheers!\n"}},"2018-02-26-blog-progress":{"index.md":{"file":"/posts/2018-02-26-blog-progress/index.md","dir":"/posts/2018-02-26-blog-progress","name":"index","base":"index.md","ext":".md","attr":{"title":"Blog progress","date":"2018-02-26T00:00:00.000Z","category":"this-blog","tags":["typography","design","css","markdown"],"excerpt":"Second day developing this project, long road ahead."},"body":"\nHello again!\n\nIf you are checking this blog at the date of this post, you may still be thinking: \"meh...\"\n\nC'mon, take some faith on me! So far I spent 6h building this blog, it's based on some existing boileplated as mentioned in previous post. But I'm not using any open source CMS, I built my own CMS! I want to show you my craft, but this craft takes time, much more time. Let's keep all the fun rolling. 🤓\n\nI have a roadmap of upgrades that I want to include and they will be made progressively. The cool thing is that the project is already usable, the MVP was put alive on it's first day. Yeah yeah, quite crude, but hey, take a look at the [source code](https://github.com/bernardodiasc/bernardodiasc.github.io), it's pretty awesome already.\n\nFor future efforts, there's a lot of things in my backlog that I want to work in.\n\n## Future features:\n\n- Internationalisation (english and portuguese)\n  - With local storage with redux middleware to persist preferences\n- Comments section\n  - Well, this blog is purely based on static files, so Disqus will help with this\n- Categories routes\n  - Some content belongs together, like this \"blog progress\" series\n- Year, Month and Day routes\n  - Listing of posts with different filters for dates, based on url routes\n- Tags filtering\n  - Differently of category, as post can have many tags, so I'll make a fancy filtering that you can combine multiple tags\n- Good imagery handling\n  - Right now I'm only covering text, but will include images and other medias, because it makes way cooler\n- Share options\n  - Yeah, just some buttons to share on social network, this blog is already SEO-friendly\n- Load content asynchronously\n  - This will make things more interesting, `filestojson` was designed for small project, with little content, but I would expect to take this blog far, I want to include hability to [split output into multiple files](https://github.com/bernardodiasc/filestojson/issues/15) on `filestojson` and load content pieces asynchronously in this blog\n\n## Pending upgrades:\n\n> These are not features... this list is more about technical debts...\n\n- Make a better design\n- Complete documentation instructions and component showcases & tests (see http://bernardodiasc.github.io/docs)\n- Write more posts about technical details of this blog's development\n- Fix date format\n- Include meta information on posts\n"}},"2018-02-23-hello-world":{"card.png":{"file":"/posts/2018-02-23-hello-world/card.png","dir":"/posts/2018-02-23-hello-world","name":"card","base":"card.png","ext":".png","width":290,"height":335},"index.md":{"file":"/posts/2018-02-23-hello-world/index.md","dir":"/posts/2018-02-23-hello-world","name":"index","base":"index.md","ext":".md","attr":{"title":"Hello World","date":"2018-02-23T00:00:00.000Z","category":"this-blog","tags":["static files","react","redux","boilerplate","github pages","yarn","webpack","filestojson","markdown","frontmatter"],"excerpt":"Hi there, in this post I explain briefly how this website was made."},"body":"\nHello there! Welcome to my personal (and professional) website.\n\n\"What this site have of special\", you might wonder... 🙋\n\nFirstly, well, it's my website, yey! 😃\n\nIt's cooler than that, I'll try to keep a good content for you to read, but the starting point here another. I'm a web developer, specialized on front end development. Yeah, I do the code that return as your experience. At the moment of I'm writting this, the project is on it's early stage and I wanted to keep the visual as simple as possible. The visual will be improved progressively, right now it's under the hood that matters.\n\nAlright let's see what's the big deal here:\n\n- It's open source [github.com/bernardodiasc/bernardodiasc.github.io](https://github.com/bernardodiasc/bernardodiasc.github.io)\n- The content is based on static files [github.com/bernardodiasc/filestojson](https://github.com/bernardodiasc/filestojson)\n- The framework is quite powerful [bernardodiasc.github.io/docs](http://bernardodiasdacruz.com/docs/)\n\nBeing a front end developer, there's a lot to do for a project to make it awesome. Starting with the fact that a framework is the whole set of tools and techniques the involves the project and it's super fun to learn how to do a framework. Well, yeah, I could use something that's ready in the community, and I did used many different options for different cases, I had experience with all the major CMSes around that, and many frameworks of a variety of kinds, but right here, I made my own framework, because It's cool, because it's the way I want, because I need to showcase that I know what I'm doing for people to hire me! 😁\n\nThe `filestojson` script was made for [x-team.com/legacy](https://x-team.com/legacy/) in it's first version, and at that moment the whole site had html static files generators and npm tasks to build the assets. In the second version I kept the content generator and upgraded the template render to React. Because React is awesome and it makes development experience a breeze.\n\nMost problems I found in the second version was basicaly related to make a single-page application to behave well in a static-file server. Was my first time doing this, I gave a try on Gasby and Next.js, but I wanted to make something simpler, so I kept the Creat-React-App setup and installed [github.com/stereobooster/react-snap](https://github.com/stereobooster/react-snap). Sweet! It worked very well.\n\nFor the workflow I prepared a whole bunch of cool tooling, patterns and procedures. I enjoy working for large scale project, so in this framework I used the entire arsenal recommended for big apps (almost, there's no type system in place). You can see it in the main README of this site or check with even further details in the docs at [bernardodiasc.github.io/docs](http://bernardodiasdacruz.com/docs/), but let me briefly mention here:\n\n- Setup: `yarn install`\n- Development: `yarn start`\n- Documentation with Storybook: `yarn docs`\n- Component scaffolding: `yarn new:component`\n- Content scaffolding: `yarn new:content`\n- Content generator: `yarn content`\n- ESLint and StyleLint: `yarn lint`\n- Tests with Jest: `yarn test`\n- Build static files: `yarn build`\n- Static server: `yarn serve`\n- Deploy project: `yarn deploy`\n\n😆\n\nNotice that it's everything simple, type \"yarn something\" and voilà! The setup is trivial, development workflow is smooth and fast. It provided complete patterns for documentation and showcase of the components using Storybooks, and also includes a component generator that comes with all the boilerplate. Linters and tests suites, yeah, I've got covered that too. Can build and up a local static server to see how it's working. And finally, easy deployment. In the attempt to commit changes, the robot will prevent most as possible the introduction of wrong code or bugs (if properly tested).\n\nFor the CSS I kept pure, using BEM naming pattern. I like Sass, I like even more PostCSS and CSS Modules, and Styled-components. But I choose pure CSS here and I'm happy with.\n\nAll the tooling are here to help, to make the development experience better, reliable, faster.\n\nThanks for reading my blog, I'll do my best to post more about a lot things and evolve this blog's system, and post about that too.\n"},"poster.png":{"file":"/posts/2018-02-23-hello-world/poster.png","dir":"/posts/2018-02-23-hello-world","name":"poster","base":"poster.png","ext":".png","width":1600,"height":988}}}}